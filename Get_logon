#Created 11/19/2021
#By: Alan Newingham
#Get all successful logon attempts. Export to CSV. Email CSV. Delete CSV after Email.


Function Get-Logon {
    Param (
        [Parameter(
            ValueFromPipeline = $true,
            ValueFromPipelineByPropertyName = $true
        )]
        [Alias('Name')]
        [string]$ComputerName = $env:ComputerName
        ,
        [datetime]$StartTime
        ,
        [datetime]$EndTime
    )
    Begin {
        enum LogonTypes {
            Interactive = 2
            Network = 3
            Batch = 4
            Service = 5
            Unlock = 7
            NetworkClearText = 8
            NewCredentials = 9
            RemoteInteractive = 10
            CachedInteractive = 11
        }
        $filterHt = @{
            LogName = 'Security'
            ID = 4624
        }
        if ($PSBoundParameters.ContainsKey('StartTime')){
            $filterHt['StartTime'] = $StartTime
        }
        if ($PSBoundParameters.ContainsKey('EndTime')){
            $filterHt['EndTime'] = $EndTime
        }
    }
    Process {
        Get-WinEvent -ComputerName $ComputerName -FilterHashtable $filterHt | foreach-Object {
            [pscustomobject]@{
                ComputerName = $ComputerName
                UserAccount = $_.Properties.Value[5]
                UserDomain = $_.Properties.Value[6]
                LogonType = [LogonTypes]$_.Properties.Value[8]
                WorkstationName = $_.Properties.Value[11]
                SourceNetworkAddress = $_.Properties.Value[19]
                TimeStamp = $_.TimeCreated
            }
        }
    }
    End{}
}

#End of function, let's do this.
$date = (Get-Date -Format "yyyy-MM-dd")

#What is the file location appended with my date format?
$file = 'C:\temp\LogonRPT' + $date + '.csv'

#Run function, Pipe to csv with date, notype, and out-null helps with determining if the command finished running.
Get-Logon | Export-Csv -Path $file -NoTypeInformation | Out-Null

#Wait till file is completed, then continue. 
while (!(Test-Path $file)) { Start-Sleep 1 }

#All for email
$username = "noreply@contoso.com"
$password = "SWYgcGllIGlzIGdyZWF0IHRoYW4gSSBhbSBhbiBpZGlvdCE="
$sstr = ConvertTo-SecureString -string $password -AsPlainText -Force
$cred = New-Object System.Management.Automation.PSCredential -argumentlist $username, $sstr
$Attachment = 'C:\temp\LogonRPT' + $date + '.csv'
$body = "<h1> IT AD Account Loogon Report</h1><br><br>"
$body += "Attached is a queried list of AD accounts that have successfully loggged in.<br>"
$body += "<br><br><br><br><br><br><br>"
$body += 'This automation was created and is maintained by Alan Newingham.<br>' 
$body += 'Should you find the automation is failing in any way please let me know <a href="https://github.com/01000001-01001110/FailedLoginAttempts">here</a> <br>'
$body += "<br><br><br><br><br><br><br>"
$body += "Report Ran: $date"
Send-MailMessage -To "importantpeople@contoso.com" -from "noreply@contoso.com" -Subject 'AD Account Lockout Report' -Body $body -BodyAsHtml -Attachments $Attachment -smtpserver smtp.office365.com -usessl -Credential $cred -Port 587
#Waste not, delete the file after sending.
Remove-Item $file
